; ------------------------------------------------------------------------------
; Ioannis Karagiorgos, Dortmund, Germany, 01.2025
; My try of rewriting a characterset editor I made when I was 14 in 1987 for the Commodore 64
; I was using a Commodore 128D then and SMON for writing assembly directly into machine code
; did not know assemblers then
; ------------------------------------------------------------------------------
 include "cartheader.dasm"

; Constants
SCRN = $0400
BORDERCOLOR = $D020
RASTERIRQ_UPPER_LINE = 106
RASTERIRQ_LOWER_LINE = 180

Start
	lda #0
	jsr SetBorderColor
	jsr DisplayCharset
        jsr DrawEditAreaBorder
        jsr EnableCursor
        jsr EnableVICInterrupt

.LoopExit
	jmp .		; infinite loop



; ------------------------------------------------------------------------------
; Display the characterset at the very bottom of the screen in 7 rows
; ------------------------------------------------------------------------------
DisplayCharset SUBROUTINE 
	pha
        txa
        pha
	ldx #$00
.Loop
        txa
	sta SCRN+40*18,x
        dex
        bne .Loop
        pla
        tax
        pla
        rts

; ------------------------------------------------------------------------------
; sets the border color to create some contrast
; border color is in register a
; ------------------------------------------------------------------------------
SetBorderColor SUBROUTINE 
	pha
        sta BORDERCOLOR
        pla
        rts

; ------------------------------------------------------------------------------
; Draws a rectangle around the area where a character is displayed zoomed
; ------------------------------------------------------------------------------
DrawEditAreaBorder SUBROUTINE
	pha
        txa
        pha
        tya
        pha
        
	ldy #10
        lda #102
.DisplayRows     
        ldx #0
        jsr DisplayCharacter
        ldx #10
        jsr DisplayCharacter
        dey
        bpl .DisplayRows

	ldx #10
.DisplayColumns     
        ldy #0
        jsr DisplayCharacter
        ldy #10
        jsr DisplayCharacter
        dex
        bpl .DisplayColumns

	pla
        tay
        pla
        tax
        pla
        rts
        
; ------------------------------------------------------------------------------       
; Displays a character on screen
;   register a = character
;   register y = column 0..39
;   register x = row 0..24
; ------------------------------------------------------------------------------
DisplayCharacter
	sta .SaveAkku
        txa
        pha
        tya
        pha
        
        ; store $0400 in $fb/fc and add x times 40 bytes to calculate the correct row
        ; in video memory. the desired row is in register x
        lda #$00
        sta $fb
        lda #$04
        sta $fc
.CalculateRow	
	cpx #$00
        beq .DisplayChar
        clc		
	lda $fb
	adc #40
	sta $fb
        bcc .SkipHiByte   
        inc $fc
.SkipHiByte
        dex
        bne .CalculateRow
.DisplayChar
        lda .SaveAkku
        sta ($fb),y
        pla
        tay
        pla
        tax
        lda .SaveAkku
        rts
.SaveAkku
	byte 0


; ------------------------------------------------------------------------------
; Code is from here: https://www.c64-wiki.de/wiki/Rasterzeilen-Interrupt
; enables the raster interrupt
; ------------------------------------------------------------------------------
EnableVICInterrupt
       	sei

        lda RASTERIRQ_UPPER_LINE
        sta $d012
        lda $d011      
        and #$7f
        sta $d011

        lda $d01a      
        ora #$01
        sta $d01a

        lda #<VICInterruptHandler
        sta $0314
        lda #>VICInterruptHandler
        sta $0315

        cli
        rts
         
VICInterruptHandler
 	lda $d019      ; Test auf VIC-Interrupt
        bmi .vic_irq

        lda $dc0d      ; Timer-Interrupt bestätigen
        cli            ; Neuen VIC-Interrupt zulasen
        jmp $ea31      ; System-Interrupt ausführen

.vic_irq
	sta $d019      ; VIC-Interrupt bestätigen

        lda $d012      ; Prüfen, in welcher Zeile der
        cmp #RASTERIRQ_UPPER_LINE       ; Rasterzeilen-Interrupt auftrat
        bne .lower_irq
	; oberer irq
        lda #0      
        jsr SetBorderColor
 
        lda #RASTERIRQ_LOWER_LINE       ; Nächster Rasterzeilen-Interrupt
        sta $d012     
        bne .finish_irq
.lower_irq
        lda #1      
        jsr SetBorderColor
        lda #RASTERIRQ_UPPER_LINE       ; Nächster Rasterzeilen-Interrupt
        sta $d012      ; in Zeile 106

.finish_irq
        pla            ; Interrupt geordnet beenden
        tay
        pla
        tax
        pla
        rti

EnableCursor
  	lda #$00
    	sta $cc ;activate cursor
	clc
        ldx #0
        ldy #0
        jsr $fff0
        rts
Message
	; PETSCII - http://sta.c64.org/cbm64pet.html
	byte "HELLO WORLD!"
	byte 13,0
